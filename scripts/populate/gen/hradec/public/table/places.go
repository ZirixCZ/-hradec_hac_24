//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Places = newPlacesTable("public", "places", "")

type placesTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnString
	Type              postgres.ColumnString
	SubType           postgres.ColumnString
	Name              postgres.ColumnString
	Description       postgres.ColumnString
	Accessibility     postgres.ColumnInteger
	AccessibilityNote postgres.ColumnString
	Capacity          postgres.ColumnInteger
	CapacityNote      postgres.ColumnString
	Phones            postgres.ColumnString
	Web               postgres.ColumnString
	Okres             postgres.ColumnString
	Obce              postgres.ColumnString
	Address           postgres.ColumnString
	Point             postgres.ColumnString
	LikeCount         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlacesTable struct {
	placesTable

	EXCLUDED placesTable
}

// AS creates new PlacesTable with assigned alias
func (a PlacesTable) AS(alias string) *PlacesTable {
	return newPlacesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlacesTable with assigned schema name
func (a PlacesTable) FromSchema(schemaName string) *PlacesTable {
	return newPlacesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlacesTable with assigned table prefix
func (a PlacesTable) WithPrefix(prefix string) *PlacesTable {
	return newPlacesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlacesTable with assigned table suffix
func (a PlacesTable) WithSuffix(suffix string) *PlacesTable {
	return newPlacesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlacesTable(schemaName, tableName, alias string) *PlacesTable {
	return &PlacesTable{
		placesTable: newPlacesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newPlacesTableImpl("", "excluded", ""),
	}
}

func newPlacesTableImpl(schemaName, tableName, alias string) placesTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		TypeColumn              = postgres.StringColumn("type")
		SubTypeColumn           = postgres.StringColumn("sub_type")
		NameColumn              = postgres.StringColumn("name")
		DescriptionColumn       = postgres.StringColumn("description")
		AccessibilityColumn     = postgres.IntegerColumn("accessibility")
		AccessibilityNoteColumn = postgres.StringColumn("accessibility_note")
		CapacityColumn          = postgres.IntegerColumn("capacity")
		CapacityNoteColumn      = postgres.StringColumn("capacity_note")
		PhonesColumn            = postgres.StringColumn("phones")
		WebColumn               = postgres.StringColumn("web")
		OkresColumn             = postgres.StringColumn("okres")
		ObceColumn              = postgres.StringColumn("obce")
		AddressColumn           = postgres.StringColumn("address")
		PointColumn             = postgres.StringColumn("point")
		LikeCountColumn         = postgres.IntegerColumn("like_count")
		allColumns              = postgres.ColumnList{IDColumn, TypeColumn, SubTypeColumn, NameColumn, DescriptionColumn, AccessibilityColumn, AccessibilityNoteColumn, CapacityColumn, CapacityNoteColumn, PhonesColumn, WebColumn, OkresColumn, ObceColumn, AddressColumn, PointColumn, LikeCountColumn}
		mutableColumns          = postgres.ColumnList{TypeColumn, SubTypeColumn, NameColumn, DescriptionColumn, AccessibilityColumn, AccessibilityNoteColumn, CapacityColumn, CapacityNoteColumn, PhonesColumn, WebColumn, OkresColumn, ObceColumn, AddressColumn, PointColumn, LikeCountColumn}
	)

	return placesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Type:              TypeColumn,
		SubType:           SubTypeColumn,
		Name:              NameColumn,
		Description:       DescriptionColumn,
		Accessibility:     AccessibilityColumn,
		AccessibilityNote: AccessibilityNoteColumn,
		Capacity:          CapacityColumn,
		CapacityNote:      CapacityNoteColumn,
		Phones:            PhonesColumn,
		Web:               WebColumn,
		Okres:             OkresColumn,
		Obce:              ObceColumn,
		Address:           AddressColumn,
		Point:             PointColumn,
		LikeCount:         LikeCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
