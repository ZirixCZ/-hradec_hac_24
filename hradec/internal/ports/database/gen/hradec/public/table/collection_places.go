//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CollectionPlaces = newCollectionPlacesTable("public", "collection_places", "")

type collectionPlacesTable struct {
	postgres.Table

	// Columns
	CollectionID postgres.ColumnInteger
	PlaceID      postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectionPlacesTable struct {
	collectionPlacesTable

	EXCLUDED collectionPlacesTable
}

// AS creates new CollectionPlacesTable with assigned alias
func (a CollectionPlacesTable) AS(alias string) *CollectionPlacesTable {
	return newCollectionPlacesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionPlacesTable with assigned schema name
func (a CollectionPlacesTable) FromSchema(schemaName string) *CollectionPlacesTable {
	return newCollectionPlacesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionPlacesTable with assigned table prefix
func (a CollectionPlacesTable) WithPrefix(prefix string) *CollectionPlacesTable {
	return newCollectionPlacesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionPlacesTable with assigned table suffix
func (a CollectionPlacesTable) WithSuffix(suffix string) *CollectionPlacesTable {
	return newCollectionPlacesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionPlacesTable(schemaName, tableName, alias string) *CollectionPlacesTable {
	return &CollectionPlacesTable{
		collectionPlacesTable: newCollectionPlacesTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newCollectionPlacesTableImpl("", "excluded", ""),
	}
}

func newCollectionPlacesTableImpl(schemaName, tableName, alias string) collectionPlacesTable {
	var (
		CollectionIDColumn = postgres.IntegerColumn("collection_id")
		PlaceIDColumn      = postgres.StringColumn("place_id")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		allColumns         = postgres.ColumnList{CollectionIDColumn, PlaceIDColumn, CreatedAtColumn}
		mutableColumns     = postgres.ColumnList{CreatedAtColumn}
	)

	return collectionPlacesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CollectionID: CollectionIDColumn,
		PlaceID:      PlaceIDColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
